1. Overloading היא העמסה בקוד כלומר אנחנו מייצרים פונקציה נוספת עם אותו השם אך לא עם אותם הפרמטרים מבחינת כמות וסוג זאת אומרת יכולה להיות
פונקציה עם אותו השם אך היא מחוייבת לשוני או בכמות פרמטרים או בסוג הפרמטר אותו היא נושאת או בשניהם .
2.כדי להשתמש בoverloading במקרה שאני מייצר מחלקה שיורשת ממחלקה אחרת ואני מעוניין לשנות את הפרטים שנמצאים במחלקה המורישה בכדי להתאימם למחלקה 
היורשת.
3. בצורה הבאה                                                                           public ctor(string,int,bool) : this(string);
4.פונקציה שאמורה להכתב מחדש\להדרס בבנים היורשים אבל במידה והפונקציה לא תדרס בבנים היורשים אז היא פשוט תרוץ מאיפה שהיא נכתבה לראשונה , נשתמש בפונקציה 
הזו ברגע שנרצה שהמחלקה תשאר רגילה ולא אבסטרקטית אבל לא תחייב את המחלקות היורשות בפונקציה שנרצה .
5.לפונקציה המוגדרת כvirtual יש מימוש אך המימוש שלו הוא לא חובה .
6.לא חייב לממש את פונקציה מסוג virtual בבנים היורשים ובמידה והפונקציה לא תדרס בבנים היא פשוט תרוץ מהמקום שבו היא נרשמה לראשונה.
7. מכיוון שכשאשר שאנו מגדירים פונקציה מסוג abstract אנו מכוונים לכך שהפונקציה תדרס במחלקות היורשות ולכן אין צורך להוסיף את המילה virtual כי ידוע מראש שהפונקציה 
תדרס ואנו לא ניתן לה אופציה שאולי לא תדרס .
8.abstract מחייב דריסה של פונקציות במחלקות היורשות ו-virtual לא מחייב דריסה במחלקות היורשות .
9.מכיוון שהמחלקה היורשת חייבת לממש את הבנאי שמופיע באבא ולכן תחול חובת הדריסה של הבנאי בבן כדי לפתור את הבעיה נקיים דריסה של הבנאי במחלקת האב 
במחלקת הבן .
10.הבנאי של מחלקת האב נקרא לפני הבנאי במחלקת הבן .
11. ממחלקת object.
12.(public static bool Equals(Object objA, Object objB);
public static bool ReferenceEquals(Object objA, Object objB);
public virtual bool Equals(Object obj);
public virtual int GetHashCode();
public Type GetType();
public virtual string ToString();
protected Object MemberwiseClone();
היתרונות בזה הם שכל מחלקה שאי פעם אייצר תירש את הפונקציות שנמצאות במחלקת אובג'קט.
13.כן  "Every thing is an object "
14. לאפשר לפונקציה לקבל מערך של ארגומנטים ,דרך comand prompt אפשר למסור לו ערכים חיצוניים.
